name: CI Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarcloud:
    name: Run SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      # Checkout del código con todo el historial
      - name: Checkout repository with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtiene todo el historial de cambios para evitar el clon superficial

      # Configurar PHP 8.2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Instalar dependencias (si usas Composer)
      - name: Install dependencies
        run: |
          cd project  # Cambiar a la carpeta del proyecto
          composer install

      # Ejecutar el análisis de SonarCloud utilizando el archivo 'sonar-project.properties'
      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: project  # Ruta al directorio base donde está el archivo 'sonar-project.properties'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Usa el token almacenado en los secretos

  snyk:
    name: Run Snyk Analysis
    runs-on: ubuntu-latest
    needs: sonarcloud  # Depende de que SonarCloud termine antes de ejecutarse

    steps:
      # Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurar PHP 8.2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Instalar dependencias (Composer)
      - name: Install dependencies
        run: |
          cd project  # Cambiar a la carpeta del proyecto
          composer install

      # Instalar Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Autenticarse en Snyk
      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Ejecutar pruebas de Snyk y generar el reporte JSON
      - name: Run Snyk Code test
        run: |
          snyk code test --sarif-file-output=project/informes/snyk/snyk.sarif --json-file-output=project/informes/snyk/snyk-report.json || echo "Snyk code test completed with issues"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Verificar que el archivo SARIF se generó correctamente
      - name: Check SARIF file existence
        run: ls -la project/informes/snyk/snyk.sarif

      # Instalar Snyk-to-HTML y generar el reporte HTML
      - name: Generate HTML report from SARIF
        run: |
          npm install -g snyk-to-html
          snyk-to-html -i project/informes/snyk/snyk.sarif -o project/informes/snyk/snyk-report.html

      # Verificar que el reporte HTML se generó correctamente
      - name: Check HTML report existence
        run: ls -la project/informes/snyk/snyk-report.html

      # Subir el archivo SARIF a GitHub Code Scanning
      - name: Upload Snyk SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: project/informes/snyk/snyk.sarif  # Subir el archivo SARIF generado

      # Commit y push de los informes al repositorio principal (rama main)
      - name: Push Snyk reports to main branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add project/informes/snyk/*
          git commit -m "Add Snyk reports" || echo "No changes to commit"
          
          # Limpiar cualquier cambio no confirmado
          git reset --hard

          # Asegurarse de que los cambios remotos estén integrados
          git pull origin main --rebase

          # Subir los cambios a la rama main
          git push origin main

  semgrep:
    name: Run Semgrep Analysis
    runs-on: ubuntu-latest
    needs: snyk  # Depende de que Snyk termine antes de ejecutarse

    steps:
      # Paso 1: Descargar el código del repositorio
      - name: Checkout Repository
        uses: actions/checkout@v4  # Usar la última versión de actions/checkout

      # Paso 2: Configurar Semgrep con Docker
      - name: Set up Semgrep
        run: docker pull semgrep/semgrep  # Descargar la imagen de Semgrep

      # Paso 3: Ejecutar Semgrep con salida SARIF
      - name: Run Semgrep (SARIF Output)
        run: |
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/php" --sarif --output=project/informes/segrem/report.sarif --metrics=off  # Ejecutar el análisis y generar reporte SARIF

      # Paso 4: Subir el archivo SARIF a GitHub Code Scanning
      - name: Upload SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: project/informes/segrem/report.sarif  # Subir el archivo SARIF generado

      # Paso 5: Ejecutar Semgrep con salida JSON
      - name: Run Semgrep (JSON Output)
        run: |
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/php" --json --output project/informes/segrem/semgrep.json --metrics=off  # Ejecutar el análisis y generar reporte JSON

      # Paso 6: Instalar prospector2html para convertir JSON a HTML
      - name: Install prospector-html
        run: |
          python -m pip install --upgrade pip
          pip install prospector2html  # Instalar la herramienta para convertir JSON a HTML

      # Paso 7: Convertir los resultados JSON de Semgrep a HTML
      - name: Convert Semgrep results to HTML
        run: |
          prospector-html --input project/informes/segrem/semgrep.json --output project/informes/segrem/semgrep-report.html --filter semgrep || true  # Convertir el JSON a HTML

      # Paso 8: Commit y push de los informes a la rama main
      - name: Push Semgrep reports to main branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add project/informes/segrem/*
          git commit -m "Add Semgrep reports" || echo "No changes to commit"
          
          # Limpiar cualquier cambio no confirmado
          git reset --hard

          # Asegurarse de que los cambios remotos estén integrados
          git pull origin main --rebase

          # Subir los cambios a la rama main
          git push origin main

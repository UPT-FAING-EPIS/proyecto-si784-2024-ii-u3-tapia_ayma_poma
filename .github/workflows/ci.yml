name: CI Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarcloud:
    name: Run SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: |
          cd project
          composer install

      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: project
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    name: Run Snyk Analysis
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: |
          cd project
          composer install

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Code test
        run: |
          snyk code test --sarif-file-output=project/informes/snyk/snyk.sarif --json-file-output=project/informes/snyk/snyk-report.json || echo "Snyk code test completed with issues"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Check SARIF file existence
        run: ls -la project/informes/snyk/snyk.sarif

      - name: Generate HTML report from SARIF
        run: |
          npm install -g snyk-to-html
          snyk-to-html -i project/informes/snyk/snyk.sarif -o project/informes/snyk/snyk-report.html

      - name: Check HTML report existence
        run: ls -la project/informes/snyk/snyk-report.html

      - name: Upload Snyk SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: project/informes/snyk/snyk.sarif

  semgrep:
    name: Run Semgrep Analysis
    runs-on: ubuntu-latest
    needs: snyk

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Semgrep
        run: docker pull semgrep/semgrep

      - name: Run Semgrep (SARIF Output)
        run: |
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/php" --sarif --output=project/informes/segrem/report.sarif --metrics=off

      - name: Upload SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: project/informes/segrem/report.sarif

      - name: Run Semgrep (JSON Output)
        run: |
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/php" --json --output project/informes/segrem/semgrep.json --metrics=off

      - name: Install prospector-html
        run: |
          python -m pip install --upgrade pip
          pip install prospector2html

      - name: Convert Semgrep results to HTML
        run: |
          prospector-html --input project/informes/segrem/semgrep.json --output project/informes/segrem/semgrep-report.html --filter semgrep || true

  phpunit:
    name: Run PHPUnit Tests
    runs-on: ubuntu-latest
    needs: semgrep

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: xdebug

      - name: Install dependencies
        run: |
          cd project
          composer install

      - name: Fix permissions for PHPUnit
        run: |
          cd project
          chmod +x vendor/bin/phpunit

      - name: Run PHPUnit tests
        run: |
          cd project
          php vendor/bin/phpunit --coverage-html informes/pruebasunitarias

  bdd-tests:
    name: Run BDD Codeception Tests and Generate Allure Report
    runs-on: ubuntu-latest  # Puedes usar un runner de Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # Ajusta la versión de PHP según sea necesario 

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -sS https://getcomposer.org/installer | php
          mv composer.phar /usr/local/bin/composer
          cd project  # Cambia al directorio del proyecto
          composer install --dev  # Instalar las dependencias del proyecto

      - name: Install Codeception and Allure Codeception module
        run: |
          cd project  # Cambia al directorio del proyecto
          composer require --dev codeception/codeception
          composer require allure-framework/allure-codeception

      - name: Install Allure CLI
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/2.18.1/allure-2.18.1.tgz
          tar -zxvf allure-2.18.1.tgz
          sudo mv allure-2.18.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Give execute permissions to Codeception
        run: |
          cd project  # Cambia al directorio del proyecto
          chmod +x vendor/bin/codecept  # Otorga permisos de ejecución a Codeception

      - name: Build Codeception
        run: |
          cd project  # Cambia al directorio del proyecto
          vendor/bin/codecept build  # Prepara el entorno de pruebas

      - name: Run Tests
        run: |
          cd project  # Cambia al directorio del proyecto
          vendor/bin/codecept run --debug --ext "Qameta\Allure\Codeception\AllureCodeception"

      - name: Generate Allure Report
        run: |
          cd project  # Cambia al directorio del proyecto
          allure generate tests/_output/allure-results -o ./informes/bbd --clean  # Genera el reporte de Allure

  mutation-tests:
    name: Run Mutation Tests
    runs-on: ubuntu-latest
    needs: phpunit  # Ensure this runs after PHPUnit

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: xdebug

      - name: Install dependencies
        run: |
          cd project
          composer install

      - name: Create directories for reports
        run: |
          mkdir -p project/informes/mutacion

      - name: Fix permissions for mutation report directory
        run: |
          chmod -R 777 project/informes/mutacion

      - name: Generate PHPUnit coverage (XML)
        run: |
          cd project
          php vendor/bin/phpunit --coverage-xml=coverage

      - name: Generate infection HTML report
        run: |
          cd project
          php vendor/bin/infection --coverage=coverage --logger-html=informes/mutacion/infection-log.html

      - name: Generate infection summary
        run: |
          cd project
          php vendor/bin/infection --coverage=coverage --formatter=progress > informes/mutacion/infection-summary.txt

  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [mutation-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List directories
        run: |
          ls -R

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Playwright dependencies
        run: |
          dotnet build project/tests/UI/AppTest.csproj
          pwsh ./project/tests/UI/bin/Debug/net8.0/playwright.ps1 install

      - name: Clean old videos
        run: rm -rf project/tests/UI/videos

      - name: Start PHP Server
        run: |
          cd project/public
          php -S localhost:8000 &
          sleep 30

      - name: Run Playwright tests
        run: |
          dotnet build project/tests/UI/AppTest.csproj
          dotnet test project/tests/UI/AppTest.csproj --collect:"XPlat Code Coverage"

      - name: Upload Test Videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-videos
          path: project/tests/UI/videos/

      - name: Generate Coverage Report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          export PATH="$PATH:~/.dotnet/tools"
          reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:HTML

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report/

  commit_and_push_reports:
    name: Commit and Push All Reports
    runs-on: ubuntu-latest
    needs: [sonarcloud, snyk, semgrep, phpunit, mutation-tests, generate-test-report]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Commit and push all reports to main branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add project/informes/*
          git commit -m "Add analysis, test, and mutation reports" || echo "No changes to commit"
          
          git reset --hard
          git pull origin main --rebase
          git push origin main

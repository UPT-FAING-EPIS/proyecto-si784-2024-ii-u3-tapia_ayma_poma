Escaped mutants:
================

Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Controllers\AuthController.php:29    [M] FunctionCallRemoval

@@ @@
             // En modo de pruebas, almacena la redirección
             $this->redirect = $url;
         } else {
-            // En producción, ejecuta la redirección real
-            header("Location: {$url}");
+            
             exit;
         }
     }


2) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Controllers\NotificationController.php:27    [M] FunctionCallRemoval

@@ @@
             // En modo pruebas, almacena la redirección
             $this->redirect = $url;
         } else {
-            // En producción, realiza la redirección real
-            header("Location: {$url}");
+            
             exit;
         }
     }


3) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Controllers\TaskController.php:32    [M] FunctionCallRemoval

@@ @@
             // En modo de pruebas, almacena la redirección
             $this->redirect = $url;
         } else {
-            // En producción, ejecuta la redirección real
-            header("Location: {$url}");
+            
             exit;
         }
     }


4) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Controllers\TaskController.php:105    [M] PublicVisibility

@@ @@
             return false;
         }
     }
-    public function getTaskById($id)
+    protected function getTaskById($id)
     {
         return $this->taskModel->getTaskById($id);
     }


5) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:17    [M] Throw_

@@ @@
     {
         $config = include __DIR__ . '/../../config/database.php';
         if (empty($config['host']) || empty($config['db']) || empty($config['user']) || !isset($config['pass'])) {
-            throw new \InvalidArgumentException("Invalid database configuration.");
+            new \InvalidArgumentException("Invalid database configuration.");
         }
         try {
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);


6) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:28    [M] Concat

@@ @@
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);
             $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
         } catch (PDOException $e) {
-            throw new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
+            throw new PDOException($e->getMessage() . "Connection failed: ", (int) $e->getCode(), $e);
         }
     }
     // Método para acceder a la conexión


7) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:28    [M] ConcatOperandRemoval

@@ @@
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);
             $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
         } catch (PDOException $e) {
-            throw new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
+            throw new PDOException($e->getMessage(), (int) $e->getCode(), $e);
         }
     }
     // Método para acceder a la conexión


8) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:28    [M] ConcatOperandRemoval

@@ @@
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);
             $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
         } catch (PDOException $e) {
-            throw new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
+            throw new PDOException("Connection failed: ", (int) $e->getCode(), $e);
         }
     }
     // Método para acceder a la conexión


9) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:28    [M] CastInt

@@ @@
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);
             $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
         } catch (PDOException $e) {
-            throw new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
+            throw new PDOException("Connection failed: " . $e->getMessage(), $e->getCode(), $e);
         }
     }
     // Método para acceder a la conexión


10) C:\Users\TheGoat\Desktop\clone\proyecto-si784-2024-ii-u3-tapia_ayma_poma\project\app\Models\Database.php:28    [M] Throw_

@@ @@
             $this->conn = new PDO("mysql:host={$config['host']};dbname={$config['db']}", $config['user'], $config['pass']);
             $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
         } catch (PDOException $e) {
-            throw new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
+            new PDOException("Connection failed: " . $e->getMessage(), (int) $e->getCode(), $e);
         }
     }
     // Método para acceder a la conexión
